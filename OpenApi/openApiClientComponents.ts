/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useOpenApiClientContext,
  OpenApiClientContext,
} from "./openApiClientContext";
import type * as Fetcher from "./openApiClientFetcher";
import { openApiClientFetch } from "./openApiClientFetcher";
import type * as Schemas from "./openApiClientSchemas";

export type ApiCategoriesListError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesListResponse = Schemas.Category[];

export type ApiCategoriesListVariables = OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesList = (
  variables: ApiCategoriesListVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiCategoriesListResponse,
    ApiCategoriesListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/categories/", method: "get", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesList = <TData = ApiCategoriesListResponse>(
  variables: ApiCategoriesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiCategoriesListResponse,
      ApiCategoriesListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    ApiCategoriesListResponse,
    ApiCategoriesListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/categories/",
      operationId: "apiCategoriesList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiCategoriesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiCategoriesCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesCreateVariables = {
  body: Schemas.Category;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesCreate = (
  variables: ApiCategoriesCreateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Category,
    ApiCategoriesCreateError,
    Schemas.Category,
    {},
    {},
    {}
  >({ url: "/api/categories/", method: "post", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Category,
      ApiCategoriesCreateError,
      ApiCategoriesCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Category,
    ApiCategoriesCreateError,
    ApiCategoriesCreateVariables
  >({
    mutationFn: (variables: ApiCategoriesCreateVariables) =>
      fetchApiCategoriesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiCategoriesRetrievePathParams = {
  /**
   * A unique integer value identifying this category.
   */
  id: number;
};

export type ApiCategoriesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesRetrieveVariables = {
  pathParams: ApiCategoriesRetrievePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesRetrieve = (
  variables: ApiCategoriesRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Category,
    ApiCategoriesRetrieveError,
    undefined,
    {},
    {},
    ApiCategoriesRetrievePathParams
  >({ url: "/api/categories/{id}/", method: "get", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesRetrieve = <TData = Schemas.Category>(
  variables: ApiCategoriesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Category,
      ApiCategoriesRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    Schemas.Category,
    ApiCategoriesRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/categories/{id}/",
      operationId: "apiCategoriesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiCategoriesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiCategoriesUpdatePathParams = {
  /**
   * A unique integer value identifying this category.
   */
  id: number;
};

export type ApiCategoriesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesUpdateVariables = {
  body: Schemas.Category;
  pathParams: ApiCategoriesUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesUpdate = (
  variables: ApiCategoriesUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Category,
    ApiCategoriesUpdateError,
    Schemas.Category,
    {},
    {},
    ApiCategoriesUpdatePathParams
  >({ url: "/api/categories/{id}/", method: "put", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Category,
      ApiCategoriesUpdateError,
      ApiCategoriesUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Category,
    ApiCategoriesUpdateError,
    ApiCategoriesUpdateVariables
  >({
    mutationFn: (variables: ApiCategoriesUpdateVariables) =>
      fetchApiCategoriesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiCategoriesPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this category.
   */
  id: number;
};

export type ApiCategoriesPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesPartialUpdateVariables = {
  body?: Schemas.PatchedCategory;
  pathParams: ApiCategoriesPartialUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesPartialUpdate = (
  variables: ApiCategoriesPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Category,
    ApiCategoriesPartialUpdateError,
    Schemas.PatchedCategory,
    {},
    {},
    ApiCategoriesPartialUpdatePathParams
  >({ url: "/api/categories/{id}/", method: "patch", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Category,
      ApiCategoriesPartialUpdateError,
      ApiCategoriesPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Category,
    ApiCategoriesPartialUpdateError,
    ApiCategoriesPartialUpdateVariables
  >({
    mutationFn: (variables: ApiCategoriesPartialUpdateVariables) =>
      fetchApiCategoriesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiCategoriesDestroyPathParams = {
  /**
   * A unique integer value identifying this category.
   */
  id: number;
};

export type ApiCategoriesDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesDestroyVariables = {
  pathParams: ApiCategoriesDestroyPathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const fetchApiCategoriesDestroy = (
  variables: ApiCategoriesDestroyVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    undefined,
    ApiCategoriesDestroyError,
    undefined,
    {},
    {},
    ApiCategoriesDestroyPathParams
  >({ url: "/api/categories/{id}/", method: "delete", ...variables, signal });

/**
 * This class maps the underlying database table, it
 * allow the user the update, retive and destory Category objects.
 */
export const useApiCategoriesDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ApiCategoriesDestroyError,
      ApiCategoriesDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    undefined,
    ApiCategoriesDestroyError,
    ApiCategoriesDestroyVariables
  >({
    mutationFn: (variables: ApiCategoriesDestroyVariables) =>
      fetchApiCategoriesDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPricesListError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesListResponse = Schemas.Price[];

export type ApiPricesListVariables = OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesList = (
  variables: ApiPricesListVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiPricesListResponse,
    ApiPricesListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/prices/", method: "get", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesList = <TData = ApiPricesListResponse>(
  variables: ApiPricesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiPricesListResponse,
      ApiPricesListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<ApiPricesListResponse, ApiPricesListError, TData>({
    queryKey: queryKeyFn({
      path: "/api/prices/",
      operationId: "apiPricesList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiPricesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiPricesCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesCreateVariables = {
  body: Schemas.Price;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesCreate = (
  variables: ApiPricesCreateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Price,
    ApiPricesCreateError,
    Schemas.Price,
    {},
    {},
    {}
  >({ url: "/api/prices/", method: "post", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Price,
      ApiPricesCreateError,
      ApiPricesCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Price,
    ApiPricesCreateError,
    ApiPricesCreateVariables
  >({
    mutationFn: (variables: ApiPricesCreateVariables) =>
      fetchApiPricesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPricesRetrievePathParams = {
  /**
   * A unique integer value identifying this price.
   */
  id: number;
};

export type ApiPricesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesRetrieveVariables = {
  pathParams: ApiPricesRetrievePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesRetrieve = (
  variables: ApiPricesRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Price,
    ApiPricesRetrieveError,
    undefined,
    {},
    {},
    ApiPricesRetrievePathParams
  >({ url: "/api/prices/{id}/", method: "get", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesRetrieve = <TData = Schemas.Price>(
  variables: ApiPricesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Price, ApiPricesRetrieveError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<Schemas.Price, ApiPricesRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/prices/{id}/",
      operationId: "apiPricesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiPricesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiPricesUpdatePathParams = {
  /**
   * A unique integer value identifying this price.
   */
  id: number;
};

export type ApiPricesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesUpdateVariables = {
  body: Schemas.Price;
  pathParams: ApiPricesUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesUpdate = (
  variables: ApiPricesUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Price,
    ApiPricesUpdateError,
    Schemas.Price,
    {},
    {},
    ApiPricesUpdatePathParams
  >({ url: "/api/prices/{id}/", method: "put", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Price,
      ApiPricesUpdateError,
      ApiPricesUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Price,
    ApiPricesUpdateError,
    ApiPricesUpdateVariables
  >({
    mutationFn: (variables: ApiPricesUpdateVariables) =>
      fetchApiPricesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPricesPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this price.
   */
  id: number;
};

export type ApiPricesPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesPartialUpdateVariables = {
  body?: Schemas.PatchedPrice;
  pathParams: ApiPricesPartialUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesPartialUpdate = (
  variables: ApiPricesPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Price,
    ApiPricesPartialUpdateError,
    Schemas.PatchedPrice,
    {},
    {},
    ApiPricesPartialUpdatePathParams
  >({ url: "/api/prices/{id}/", method: "patch", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Price,
      ApiPricesPartialUpdateError,
      ApiPricesPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Price,
    ApiPricesPartialUpdateError,
    ApiPricesPartialUpdateVariables
  >({
    mutationFn: (variables: ApiPricesPartialUpdateVariables) =>
      fetchApiPricesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPricesDestroyPathParams = {
  /**
   * A unique integer value identifying this price.
   */
  id: number;
};

export type ApiPricesDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ApiPricesDestroyVariables = {
  pathParams: ApiPricesDestroyPathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const fetchApiPricesDestroy = (
  variables: ApiPricesDestroyVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    undefined,
    ApiPricesDestroyError,
    undefined,
    {},
    {},
    ApiPricesDestroyPathParams
  >({ url: "/api/prices/{id}/", method: "delete", ...variables, signal });

/**
 * This class describes the Retailer db table it offers
 * an interface that allows us to perform retrive, update, and destory actions.
 */
export const useApiPricesDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ApiPricesDestroyError,
      ApiPricesDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    undefined,
    ApiPricesDestroyError,
    ApiPricesDestroyVariables
  >({
    mutationFn: (variables: ApiPricesDestroyVariables) =>
      fetchApiPricesDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProductsListError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsListResponse = Schemas.Product[];

export type ApiProductsListVariables = OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsList = (
  variables: ApiProductsListVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiProductsListResponse,
    ApiProductsListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/products/", method: "get", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsList = <TData = ApiProductsListResponse>(
  variables: ApiProductsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiProductsListResponse,
      ApiProductsListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    ApiProductsListResponse,
    ApiProductsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/products/",
      operationId: "apiProductsList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiProductsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiProductsCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsCreateVariables = {
  body: Schemas.Product;
} & OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsCreate = (
  variables: ApiProductsCreateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Product,
    ApiProductsCreateError,
    Schemas.Product,
    {},
    {},
    {}
  >({ url: "/api/products/", method: "post", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Product,
      ApiProductsCreateError,
      ApiProductsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Product,
    ApiProductsCreateError,
    ApiProductsCreateVariables
  >({
    mutationFn: (variables: ApiProductsCreateVariables) =>
      fetchApiProductsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProductsRetrievePathParams = {
  /**
   * A unique integer value identifying this product.
   */
  id: number;
};

export type ApiProductsRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsRetrieveVariables = {
  pathParams: ApiProductsRetrievePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsRetrieve = (
  variables: ApiProductsRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Product,
    ApiProductsRetrieveError,
    undefined,
    {},
    {},
    ApiProductsRetrievePathParams
  >({ url: "/api/products/{id}/", method: "get", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsRetrieve = <TData = Schemas.Product>(
  variables: ApiProductsRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Product,
      ApiProductsRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<Schemas.Product, ApiProductsRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/products/{id}/",
      operationId: "apiProductsRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiProductsRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiProductsUpdatePathParams = {
  /**
   * A unique integer value identifying this product.
   */
  id: number;
};

export type ApiProductsUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsUpdateVariables = {
  body: Schemas.Product;
  pathParams: ApiProductsUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsUpdate = (
  variables: ApiProductsUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Product,
    ApiProductsUpdateError,
    Schemas.Product,
    {},
    {},
    ApiProductsUpdatePathParams
  >({ url: "/api/products/{id}/", method: "put", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Product,
      ApiProductsUpdateError,
      ApiProductsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Product,
    ApiProductsUpdateError,
    ApiProductsUpdateVariables
  >({
    mutationFn: (variables: ApiProductsUpdateVariables) =>
      fetchApiProductsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProductsPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this product.
   */
  id: number;
};

export type ApiProductsPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsPartialUpdateVariables = {
  body?: Schemas.PatchedProduct;
  pathParams: ApiProductsPartialUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsPartialUpdate = (
  variables: ApiProductsPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Product,
    ApiProductsPartialUpdateError,
    Schemas.PatchedProduct,
    {},
    {},
    ApiProductsPartialUpdatePathParams
  >({ url: "/api/products/{id}/", method: "patch", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Product,
      ApiProductsPartialUpdateError,
      ApiProductsPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Product,
    ApiProductsPartialUpdateError,
    ApiProductsPartialUpdateVariables
  >({
    mutationFn: (variables: ApiProductsPartialUpdateVariables) =>
      fetchApiProductsPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProductsDestroyPathParams = {
  /**
   * A unique integer value identifying this product.
   */
  id: number;
};

export type ApiProductsDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ApiProductsDestroyVariables = {
  pathParams: ApiProductsDestroyPathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * A view set for viewing and editing product
 */
export const fetchApiProductsDestroy = (
  variables: ApiProductsDestroyVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    undefined,
    ApiProductsDestroyError,
    undefined,
    {},
    {},
    ApiProductsDestroyPathParams
  >({ url: "/api/products/{id}/", method: "delete", ...variables, signal });

/**
 * A view set for viewing and editing product
 */
export const useApiProductsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ApiProductsDestroyError,
      ApiProductsDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    undefined,
    ApiProductsDestroyError,
    ApiProductsDestroyVariables
  >({
    mutationFn: (variables: ApiProductsDestroyVariables) =>
      fetchApiProductsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProfilesListError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesListResponse = Schemas.Profile[];

export type ApiProfilesListVariables = OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesList = (
  variables: ApiProfilesListVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiProfilesListResponse,
    ApiProfilesListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/profiles/", method: "get", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesList = <TData = ApiProfilesListResponse>(
  variables: ApiProfilesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiProfilesListResponse,
      ApiProfilesListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    ApiProfilesListResponse,
    ApiProfilesListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/profiles/",
      operationId: "apiProfilesList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiProfilesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiProfilesCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesCreateVariables = {
  body: Schemas.Profile;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesCreate = (
  variables: ApiProfilesCreateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Profile,
    ApiProfilesCreateError,
    Schemas.Profile,
    {},
    {},
    {}
  >({ url: "/api/profiles/", method: "post", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      ApiProfilesCreateError,
      ApiProfilesCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Profile,
    ApiProfilesCreateError,
    ApiProfilesCreateVariables
  >({
    mutationFn: (variables: ApiProfilesCreateVariables) =>
      fetchApiProfilesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProfilesRetrievePathParams = {
  /**
   * A unique integer value identifying this profile.
   */
  id: number;
};

export type ApiProfilesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesRetrieveVariables = {
  pathParams: ApiProfilesRetrievePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesRetrieve = (
  variables: ApiProfilesRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Profile,
    ApiProfilesRetrieveError,
    undefined,
    {},
    {},
    ApiProfilesRetrievePathParams
  >({ url: "/api/profiles/{id}/", method: "get", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesRetrieve = <TData = Schemas.Profile>(
  variables: ApiProfilesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Profile,
      ApiProfilesRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<Schemas.Profile, ApiProfilesRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/profiles/{id}/",
      operationId: "apiProfilesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiProfilesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiProfilesUpdatePathParams = {
  /**
   * A unique integer value identifying this profile.
   */
  id: number;
};

export type ApiProfilesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesUpdateVariables = {
  body: Schemas.Profile;
  pathParams: ApiProfilesUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesUpdate = (
  variables: ApiProfilesUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Profile,
    ApiProfilesUpdateError,
    Schemas.Profile,
    {},
    {},
    ApiProfilesUpdatePathParams
  >({ url: "/api/profiles/{id}/", method: "put", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      ApiProfilesUpdateError,
      ApiProfilesUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Profile,
    ApiProfilesUpdateError,
    ApiProfilesUpdateVariables
  >({
    mutationFn: (variables: ApiProfilesUpdateVariables) =>
      fetchApiProfilesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProfilesPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this profile.
   */
  id: number;
};

export type ApiProfilesPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesPartialUpdateVariables = {
  body?: Schemas.PatchedProfile;
  pathParams: ApiProfilesPartialUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesPartialUpdate = (
  variables: ApiProfilesPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Profile,
    ApiProfilesPartialUpdateError,
    Schemas.PatchedProfile,
    {},
    {},
    ApiProfilesPartialUpdatePathParams
  >({ url: "/api/profiles/{id}/", method: "patch", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Profile,
      ApiProfilesPartialUpdateError,
      ApiProfilesPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Profile,
    ApiProfilesPartialUpdateError,
    ApiProfilesPartialUpdateVariables
  >({
    mutationFn: (variables: ApiProfilesPartialUpdateVariables) =>
      fetchApiProfilesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiProfilesDestroyPathParams = {
  /**
   * A unique integer value identifying this profile.
   */
  id: number;
};

export type ApiProfilesDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ApiProfilesDestroyVariables = {
  pathParams: ApiProfilesDestroyPathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const fetchApiProfilesDestroy = (
  variables: ApiProfilesDestroyVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    undefined,
    ApiProfilesDestroyError,
    undefined,
    {},
    {},
    ApiProfilesDestroyPathParams
  >({ url: "/api/profiles/{id}/", method: "delete", ...variables, signal });

/**
 * This class details the Account model that directly maps to the users
 *     profile
 * Args:
 *     viewsets (_type_): _description_
 */
export const useApiProfilesDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ApiProfilesDestroyError,
      ApiProfilesDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    undefined,
    ApiProfilesDestroyError,
    ApiProfilesDestroyVariables
  >({
    mutationFn: (variables: ApiProfilesDestroyVariables) =>
      fetchApiProfilesDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiSchemaRetrieveQueryParams = {
  format?: "json" | "yaml";
  lang?:
    | "af"
    | "ar"
    | "ar-dz"
    | "ast"
    | "az"
    | "be"
    | "bg"
    | "bn"
    | "br"
    | "bs"
    | "ca"
    | "ckb"
    | "cs"
    | "cy"
    | "da"
    | "de"
    | "dsb"
    | "el"
    | "en"
    | "en-au"
    | "en-gb"
    | "eo"
    | "es"
    | "es-ar"
    | "es-co"
    | "es-mx"
    | "es-ni"
    | "es-ve"
    | "et"
    | "eu"
    | "fa"
    | "fi"
    | "fr"
    | "fy"
    | "ga"
    | "gd"
    | "gl"
    | "he"
    | "hi"
    | "hr"
    | "hsb"
    | "hu"
    | "hy"
    | "ia"
    | "id"
    | "ig"
    | "io"
    | "is"
    | "it"
    | "ja"
    | "ka"
    | "kab"
    | "kk"
    | "km"
    | "kn"
    | "ko"
    | "ky"
    | "lb"
    | "lt"
    | "lv"
    | "mk"
    | "ml"
    | "mn"
    | "mr"
    | "ms"
    | "my"
    | "nb"
    | "ne"
    | "nl"
    | "nn"
    | "os"
    | "pa"
    | "pl"
    | "pt"
    | "pt-br"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sq"
    | "sr"
    | "sr-latn"
    | "sv"
    | "sw"
    | "ta"
    | "te"
    | "tg"
    | "th"
    | "tk"
    | "tr"
    | "tt"
    | "udm"
    | "uk"
    | "ur"
    | "uz"
    | "vi"
    | "zh-hans"
    | "zh-hant";
};

export type ApiSchemaRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiSchemaRetrieveResponse = {
  [key: string]: any;
};

export type ApiSchemaRetrieveVariables = {
  queryParams?: ApiSchemaRetrieveQueryParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const fetchApiSchemaRetrieve = (
  variables: ApiSchemaRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiSchemaRetrieveResponse,
    ApiSchemaRetrieveError,
    undefined,
    {},
    ApiSchemaRetrieveQueryParams,
    {}
  >({ url: "/api/schema/", method: "get", ...variables, signal });

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useApiSchemaRetrieve = <TData = ApiSchemaRetrieveResponse>(
  variables: ApiSchemaRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiSchemaRetrieveResponse,
      ApiSchemaRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    ApiSchemaRetrieveResponse,
    ApiSchemaRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/schema/",
      operationId: "apiSchemaRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiSchemaRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiSuppliersListError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersListResponse = Schemas.Supplier[];

export type ApiSuppliersListVariables = OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersList = (
  variables: ApiSuppliersListVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    ApiSuppliersListResponse,
    ApiSuppliersListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/suppliers/", method: "get", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersList = <TData = ApiSuppliersListResponse>(
  variables: ApiSuppliersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiSuppliersListResponse,
      ApiSuppliersListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    ApiSuppliersListResponse,
    ApiSuppliersListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/suppliers/",
      operationId: "apiSuppliersList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiSuppliersList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiSuppliersCreateError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersCreateVariables = {
  body: Schemas.Supplier;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersCreate = (
  variables: ApiSuppliersCreateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Supplier,
    ApiSuppliersCreateError,
    Schemas.Supplier,
    {},
    {},
    {}
  >({ url: "/api/suppliers/", method: "post", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Supplier,
      ApiSuppliersCreateError,
      ApiSuppliersCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Supplier,
    ApiSuppliersCreateError,
    ApiSuppliersCreateVariables
  >({
    mutationFn: (variables: ApiSuppliersCreateVariables) =>
      fetchApiSuppliersCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiSuppliersRetrievePathParams = {
  /**
   * A unique integer value identifying this supplier.
   */
  id: number;
};

export type ApiSuppliersRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersRetrieveVariables = {
  pathParams: ApiSuppliersRetrievePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersRetrieve = (
  variables: ApiSuppliersRetrieveVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Supplier,
    ApiSuppliersRetrieveError,
    undefined,
    {},
    {},
    ApiSuppliersRetrievePathParams
  >({ url: "/api/suppliers/{id}/", method: "get", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersRetrieve = <TData = Schemas.Supplier>(
  variables: ApiSuppliersRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Supplier,
      ApiSuppliersRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApiClientContext(options);
  return reactQuery.useQuery<
    Schemas.Supplier,
    ApiSuppliersRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/suppliers/{id}/",
      operationId: "apiSuppliersRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchApiSuppliersRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiSuppliersUpdatePathParams = {
  /**
   * A unique integer value identifying this supplier.
   */
  id: number;
};

export type ApiSuppliersUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersUpdateVariables = {
  body: Schemas.Supplier;
  pathParams: ApiSuppliersUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersUpdate = (
  variables: ApiSuppliersUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Supplier,
    ApiSuppliersUpdateError,
    Schemas.Supplier,
    {},
    {},
    ApiSuppliersUpdatePathParams
  >({ url: "/api/suppliers/{id}/", method: "put", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Supplier,
      ApiSuppliersUpdateError,
      ApiSuppliersUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Supplier,
    ApiSuppliersUpdateError,
    ApiSuppliersUpdateVariables
  >({
    mutationFn: (variables: ApiSuppliersUpdateVariables) =>
      fetchApiSuppliersUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiSuppliersPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this supplier.
   */
  id: number;
};

export type ApiSuppliersPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersPartialUpdateVariables = {
  body?: Schemas.PatchedSupplier;
  pathParams: ApiSuppliersPartialUpdatePathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersPartialUpdate = (
  variables: ApiSuppliersPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    Schemas.Supplier,
    ApiSuppliersPartialUpdateError,
    Schemas.PatchedSupplier,
    {},
    {},
    ApiSuppliersPartialUpdatePathParams
  >({ url: "/api/suppliers/{id}/", method: "patch", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Supplier,
      ApiSuppliersPartialUpdateError,
      ApiSuppliersPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    Schemas.Supplier,
    ApiSuppliersPartialUpdateError,
    ApiSuppliersPartialUpdateVariables
  >({
    mutationFn: (variables: ApiSuppliersPartialUpdateVariables) =>
      fetchApiSuppliersPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiSuppliersDestroyPathParams = {
  /**
   * A unique integer value identifying this supplier.
   */
  id: number;
};

export type ApiSuppliersDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ApiSuppliersDestroyVariables = {
  pathParams: ApiSuppliersDestroyPathParams;
} & OpenApiClientContext["fetcherOptions"];

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const fetchApiSuppliersDestroy = (
  variables: ApiSuppliersDestroyVariables,
  signal?: AbortSignal
) =>
  openApiClientFetch<
    undefined,
    ApiSuppliersDestroyError,
    undefined,
    {},
    {},
    ApiSuppliersDestroyPathParams
  >({ url: "/api/suppliers/{id}/", method: "delete", ...variables, signal });

/**
 * This class describes the Supplier view set class it allows
 * us to perform, create, list, retrive and many other actions
 * related to Supplier
 */
export const useApiSuppliersDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ApiSuppliersDestroyError,
      ApiSuppliersDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenApiClientContext();
  return reactQuery.useMutation<
    undefined,
    ApiSuppliersDestroyError,
    ApiSuppliersDestroyVariables
  >({
    mutationFn: (variables: ApiSuppliersDestroyVariables) =>
      fetchApiSuppliersDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/categories/";
      operationId: "apiCategoriesList";
      variables: ApiCategoriesListVariables;
    }
  | {
      path: "/api/categories/{id}/";
      operationId: "apiCategoriesRetrieve";
      variables: ApiCategoriesRetrieveVariables;
    }
  | {
      path: "/api/prices/";
      operationId: "apiPricesList";
      variables: ApiPricesListVariables;
    }
  | {
      path: "/api/prices/{id}/";
      operationId: "apiPricesRetrieve";
      variables: ApiPricesRetrieveVariables;
    }
  | {
      path: "/api/products/";
      operationId: "apiProductsList";
      variables: ApiProductsListVariables;
    }
  | {
      path: "/api/products/{id}/";
      operationId: "apiProductsRetrieve";
      variables: ApiProductsRetrieveVariables;
    }
  | {
      path: "/api/profiles/";
      operationId: "apiProfilesList";
      variables: ApiProfilesListVariables;
    }
  | {
      path: "/api/profiles/{id}/";
      operationId: "apiProfilesRetrieve";
      variables: ApiProfilesRetrieveVariables;
    }
  | {
      path: "/api/schema/";
      operationId: "apiSchemaRetrieve";
      variables: ApiSchemaRetrieveVariables;
    }
  | {
      path: "/api/suppliers/";
      operationId: "apiSuppliersList";
      variables: ApiSuppliersListVariables;
    }
  | {
      path: "/api/suppliers/{id}/";
      operationId: "apiSuppliersRetrieve";
      variables: ApiSuppliersRetrieveVariables;
    };
